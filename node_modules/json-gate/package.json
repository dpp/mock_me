{
  "name": "json-gate",
  "description": "A friendly, fast JSON schema validator",
  "version": "0.8.22",
  "author": {
    "name": "Ofer Reichman",
    "email": "oferei@gmail.com"
  },
  "contributors": [
    {
      "name": "Ofer Reichman",
      "email": "oferei@gmail.com"
    },
    {
      "name": "Jesse Thompson"
    },
    {
      "name": "Nicolas Pelletier"
    },
    {
      "name": "Damien",
      "url": "feugy"
    },
    {
      "name": "chimmelb"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/oferei/json-gate.git"
  },
  "bugs": {
    "url": "https://github.com/oferei/json-gate/issues"
  },
  "dependencies": {},
  "keywords": [
    "json",
    "schema",
    "validator",
    "validate",
    "assert"
  ],
  "main": "lib/json-gate.js",
  "scripts": {
    "test": "node_modules\\.bin\\vows --spec"
  },
  "devDependencies": {
    "should": "*",
    "vows": "*",
    "JSV": "*"
  },
  "engines": {
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/oferei/json-gate/master/LICENSE"
    }
  ],
  "readme": "# json-gate\n\n_json-gate_ validates JSON objects against a JSON schema.\nIn other words, it makes sure an object conforms to the type and structure that your code expects.\nFor example, a server can use it to ensure input received from a client conforms to the API.\n\nThe JSON schema can also help with documentation and collaboration.\nCopy it to your API document and everybody should understand exactly what is expected.\n\n_json-gate_ likes you! It is...\n\n* Intuitive - API is super easy to use.\n* Produces human-friendly, detailed error messages - for both you and your customers.\n* Fast - Your CPU won't have time to blink.\n* Well documented, in case you don't feel like digging into the IETF specifications.\nJust keep reading, it's all here.\n* Conforms to standard - no relearning, no obligation, no surprises.\n* Both synchronous and asynchronous modes - your choice.\n\n## What's a JSON schema?\n\n[JSON Schema](http://json-schema.org/) is a proposed Internet draft defining a JSON media type (application/schema+json) with the following goals:\n\n* Validation - You can use JSON Schema to validate your JSON data.\n* Documentation - You can extract documentation information from a JSON Schema, match this documentation to your data, and use that information for user interaction.\n* Hyperlinking - You can pair your JSON data with the defining JSON Schema to build hyperlinks into parts of that JSON data.\n\n_json-gate_ supports most of [JSON Schema Draft 3](http://tools.ietf.org/html/draft-zyp-json-schema-03), minus the hyperlinking and hyper schema parts.\n\n## Example\n\n    var createSchema = require('json-gate').createSchema;\n\n    var schema = createSchema({\n    \ttype: 'object',\n    \tproperties: {\n    \t\tquery: {\n    \t\t\ttype: 'string',\n                minLength: 1,\n                maxLength: 64,\n    \t\t\trequired: true\n    \t\t},\n    \t\tmaxResults: {\n    \t\t\ttype: 'integer',\n    \t\t\tmaximum: 20,\n    \t\t\tdefault: 10\n    \t\t}\n    \t},\n        additionalProperties: false\n    });\n\n    try {\n        schema.validate(input);\n    } catch(err) {\n        return res.send(400, err); // 400 Bad Request\n    }\n\nThis schema is explained below in the _Hello, schema_ section.\n\n## Installation\n\n    $ npm install json-gate\n\n## Usage\n\n### _json-gate.createSchema_(jsonSchema)\n\nThis function gets a JSON Schema definition and returns a new _Schema_ object.\nIt verifies that the schema is valid.\nIf the latter is malformed an error will be thrown pinpointing the problem.\n\n### _Schema.validate_(jsonObject)\n\nThis function gets a JSON object and validates it against the schema.\nIf the JSON object does not conform to the schema an error will be thrown (or returned, see _Synchronous/Asynchronous_ below).\n\nThe function stops after encountering an error. It does not return multiple errors.\nThe function does not return a value.\nBe aware that the input JSON object may be edited _in-place_ if the _default_ attribute is used.\n\n### Errors\n\nThe error messages are human-friendly and detailed.\nFor example: \"JSON object property 'user.password': length is 3 when it should be at least 6\".\nReady to be shrink-wrapped in a _400 Bad Request_ response and shipped to the client!\n\nEqualy helpful error messages are produced in the case of a malformed schema, to assist you during development.\nFor example: \"Schema property 'num': 'exclusiveMaximum' attribute is a number when it should be a boolean\".\n\n### Synchronous/Asynchronous\n\n_Schema.validate_ can be called in two ways, to suit your needs:\n\n* Synchronously - as in the example above, with one parameter.\nAs already stated, it returns nothing if the object checks out. Otherwise it throws an error.\n* Asynchronously - by providing a 2nd parameter: a callback function.\nThe callback function gets two arguments: error and result (the original JSON object, which may be modified).\n\nIt should be noted that the JSON object passed to the callback function is the same as the input JSON object.\nIt is only passed for convenience.\nAny _default_ values used will affect the original JSON object, even when calling asynchronously.\n\n## Hello, schema\n\nA _JSON schema_ is defined using a JavaScript object containing various _attributes_.\n\nLet's start by analyzing the schema given in the example above.\nWhat does it say about the JSON object?\n\n* The JSON object should be an object (as opposed to an array).\n* It should have a property named _query_, which should be a string of 1 to 64 characters.\n* It may optionaly have a property named _maxResults_, which should be an integer with a maximum value of 20.\n* If _maxResults_ is missing, it will be generated with a value of 10.\n* Additional properties (other than _query_ and _maxResults_) are not allowed.\n\nJSON Schema properties can be nested: objects and arrays include other attributes, which may themselves be objects and arrays.\nNotice that objects' properties are unordered, whereas array items are ordered.\n\nSee Attributes section below to learn about more possibilities.\n\n## Attributes\n\nBelow are all the supported attributes.\n\nTerminology: in this section, *instance* refers to a JSON value (object or property) that the schema will be describing and validating.\n\n### type\n\nDefines the expected instance type.\nIt can take one of two forms:\n\n* Simple type - any of the following: 'string', 'number', 'integer', 'boolean', 'object', 'array', 'null' or 'any'.\n* Union type - an array of simple types and/or schemas. The instance type should be one of the types in the array.\n\nExample - instance should be either a string or null:\n\n    type: ['string', 'null']\n\nThe default is 'any'.\n\n### disallow\n\nDefines the disallowed instance type. This is the opposite of _type_.\nIt can take one of two forms:\n\n* Simple type - any of the following: 'string', 'number', 'integer', 'boolean', 'object', 'array', 'null' or 'any'.\n* Union type - an array of simple types and/or schemas. The instance type should not be any of the types in the array.\nFor example, if _type_ is ['string', 'null'] then the instance may be neither a string nor null.\n\n### required\n\nA boolean indicating whether an instance is mandatory (true) or optional (false).\n\nExample with a mandatory property and an optional one:\n\n    {\n        type: 'object',\n        properties: {\n            query: {\n                type: 'string',\n                required: true\n            },\n            safeSearch: {\n                type: 'string',\n                enum: ['off', 'moderate', 'strict']\n            }\n        }\n    }\n\nThe default is false (optional).\n\n### default\n\nDefines the default value of the instance when the instance is undefined.\n\nExample:\n\n    maxResults: {\n        type: 'integer',\n        default: 10\n    }\n\nThe JSON object is edited in-place.\nIn other words, the default values are set to the original JSON object, not a returned copy.\n\n### enum\n\nAn array containing all possible values.\nThe instance must equal one of the values.\n\nExample:\n\n    enum: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n### properties\n\nApplies only to instances of type `'object'`.\n\nDefines the properties of the instance object.\nThe _properties_ attribute is an object, matching properties to their valid schema.\n\nExample:\n\n    {\n        type: 'object',\n        properties: {\n            name: { type: 'string' },\n            age: { type: 'integer' }\n        }\n    }\n\nThe default is an empty object.\n\nNote: Properties are considered unordered, the order of the instance properties may be in any order.\n\n### patternProperties\n\nApplies only to instances of type `'object'`.\n\nThis attribute is similar to the _properties_ attribute, but the keys are regular expression patterns instead of property names.\nAny instance property whose name fits a pattern must be valid against the appropriate schema.\n\nExample:\n\n    {\n        type: 'object',\n        properties: {\n            '^sz': { type: 'string' },\n            '^n': { type: 'number' },\n            '^b': { type: 'boolean' }\n        }\n    }\n\nNote that using this attribute may cause instances to be validated more than once:\n\n* If a property name is defined by _properties_ and also matches a pattern in _patternProperties_.\n* If a property name matches more than one pattern in _patternProperties_.\n\n### additionalProperties\n\nApplies only to instances of type `'object'`.\n\nDefines a schema for all properties that are not explicitly defined by _properties_ and do not match any pattern in _patternProperties_.\nIt can take one of two forms:\n\n* Schema - all the additional properties must be valid against the schema.\n* False - additional properties are not allowed.\n\nExample:\n\n    {\n        type: 'object',\n        properties: {\n            id: 'integer',\n            name: 'string'\n        },\n        patternProperties: {\n            '^_debug': { type: 'any' }\n        },\n        additionalProperties: false\n    }\n\nThe default is an empty schema, which allows any value for additional properties.\n\n### dependencies\n\nApplies only to instances of type `'object'`.\n\nThis attribute is an object, matching properties to their requirements.\nIf the instance object has a property with the same name as a property in the _dependencies_ attribute object,\nthen the instance must comply with the requirement.\n\nThe requirement can take one of three forms:\n\n* Simple dependency - a string.\nThe instance object must have a property with the same name as the requirement.\nExample: `dependencies: { start: 'finish' }`.\nMeans that if an instance has a property 'start', it must also have a property 'finish'.\n* Simple dependency tuple - an array of strings.\nThe instance object must have a property with the same name as each string in the requirement's array.\nExample: `dependencies: { towel: [ 'toothbrush', 'soap', 'space suit' ]}`.\nMeans that if an instance has a property 'towel', it must also have properties 'toothbrush', 'soap' and 'space suit'.\n* Schema dependency - a schema.\nThe instance object must be valid against the schema.\nExample: `dependencies: { 'cuba-libre': { properties: { glass: { format: 'highball', required: true }}}}`\nMeans that if an instance has a property 'cuba-libre', it must also have a property 'glass' with a 'highball' format.\n\n### items\n\nApplies only to instances of type `'array'`.\n\nDefines the items of the instance array.\nIt can take one of two forms:\n\n* Schema - all the items in the array must be valid against the schema.\n* Tuple typing - an array of schemas.\nEach position in the instance array must conform to the schema in the corresponding position for this array.\nThe instance array is not required to contain all defined items.\nAdditional items are allowed, disallowed, or constrained by the _additionalItems_ attribute.\n\n### additionalItems\n\nApplies only to instances of type `'array'`, and only together with the _tuple typing_ form of the _items_ attribute.\n\n_additionalItems_ defines the behavior when there are more items in the instance array than in the _items_ array.\nIt can take one of two forms:\n\n* Schema - all the additional items must be valid against the schema.\n* False - additional items are not allowed.\n\nExample - a string, an integer and the rest are booleans:\n\n    {\n        type: 'array',\n        items: [\n            { type: 'string' },\n            { type: 'integer' }\n        ],\n        additionalItems: { type: 'boolean' }\n    }\n\nThe default is an empty schema, which allows additional items of any type.\n\n### minItems\n\nApplies only to instances of type `'array'`.\n\nDefines the minimum number of values in an array.\n\n### maxItems\n\nApplies only to instances of type `'array'`.\n\nDefines the maximum number of values in an array.\n\n### uniqueItems\n\nApplies only to instances of type `'array'`.\n\nA boolean that indicates whether all items in the array instance must be unique (contains no two identical values).\n\n### minLength\n\nApplies only to instances of type `'string'`.\n\nDefines the minimum length of the string.\n\n### maxLength\n\nApplies only to instances of type `'string'`.\n\nDefines the maximum length of the string.\n\n### pattern\n\nApplies only to instances of type `'string'`.\n\nA string containing a regular expression.\nThe instance string must match it.\n\nExample:\n\n    youtubeVideoId: {\n        type: 'string',\n        pattern: '^[A-Za-z0-9_-]{11}$'\n    }\n\n### minimum\n\nApplies only to instances of type `'number'`.\n\nDefines the minimum value of the instance property.\n\n### exclusiveMinimum\n\nApplies only to instances of type `'number'`, and only together with the _minimum_ attribute.\n\nDefines the behavior of the _minimum_ attribute:\n\n* when true, _minimum_ is exclusive (\"greater than\")\n* when false, _minimum_ is inclusive (\"greater than or equal\")\n\nExample:\n\n    rand: {\n        type: 'number',\n        minimum: 0,\n        exclusiveMinimum: false,\n        maximum: 1,\n        exclusiveMaximum: true\n    }\n\nThe default is false.\n\n### maximum\n\nApplies only to instances of type `'number'`.\n\nDefines the maximum value of the instance property.\n\n### exclusiveMaximum\n\nApplies only to instances of type `'number'`, and only together with the _maximum_ attribute.\n\nDefines the behavior of the _maximum_ attribute:\n\n* when true, _maximum_ is exclusive (\"less than\")\n* when false, _maximum_ is inclusive (\"less than or equal\")\n\nExample:\n\n    rand: {\n        type: 'number',\n        minimum: 0,\n        exclusiveMinimum: false,\n        maximum: 1,\n        exclusiveMaximum: true\n    }\n\nThe default is false.\n\n### divisibleBy\n\nApplies only to instances of type `'number'`.\n\nDefines what value the number instance must be divisible by with no remainder.\nThis value may not be 0.\n\n### format\n\nApplies only to instances of types `'string'` or `'number'`.\n\nDefines the expected instance format.\n\nAvailable formats:\n\n* date-time - A string containing a date in ISO 8601 format of YYYY-MM-DDThh:mm:ss[.fraction]Z in UTC time.\nThe decimal fraction is optional and the decimal dot can be replaced with a comma.\nExample: `'2012-11-06T09:13:24Z'`.\n* date - A string containing a date in the format of YYYY-MM-DD.\nExample: `'2012-11-06'`.\n* time - A string containing a time in the format of hh:mm:ss.\nExample: `'09:13:24'`.\n* utc-millisec - A number or an integer containing the number of milliseconds that have elapsed since midnight UTC, 1 January 1970.\n* regex - A string containing a regular expression, following the regular expression specification from ECMA 262.\nExample: `'^[0-9]{5}-[0-9]{4}$'`.\n* color - A string containing a CSS color, based on CSS 2.1 [W3C.CR-CSS21-20070719].\nExamples: `'red'`, `'#FF9900'`, `'f90'`, `'rgb(64, 224, 208)'`, `'rgb(100%, 0%, 25%)'`.\n* phone - A string containing a national or international phone number, based on E.123.\nNo hypens allows, only spaces.\nExamples: `'(42) 123 4567'`, `'+31 42 123 4567'`.\n* uri - A string containing a URI.\nExample: `'https://github.com/oferei/json-gate'`.\n* email - A string containing an email address.\nExample: `'thepope@gmail.com'`.\n* ip-address - A string containing an ip version 4 address.\nExample: `'192.168.1.1'`.\n* ipv6 - A string containing an ip version 6 address.\nExample: `'2001:0db8:85a3:0042:0000:8a2e:0370:7334'`.\n* host-name - A string containing a host-name.\nExample: `'github.com'`.\n\nNote: Unknown formats are silently ignored.\n\n### title\n\nA string that provides a short description of instance property.\n\nIt allows to document the JSON schema.\nIt has no effect on the validation process.\n\nExample:\n\n    postalPlusFourCode: {\n        title: 'ZIP+4 code',\n        description: 'Zip+4 code: 5 digits dash 4 digits',\n        type: 'string',\n        pattern: '^[0-9]{5}-[0-9]{4}$'\n    }\n\n### description\n\nA string that provides a full description of the purpose of the instance property.\n\nIt allows to document the JSON schema.\nIt has no effect on the validation process.\n\nExample:\n\n    {\n        description: 'A person',\n        type: 'object',\n        properties: {\n            name: { type: 'string' },\n            age: { type: 'integer' }\n        }\n    }\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Ofer Reichman\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "json-gate@0.8.22",
  "_from": "json-gate@0.8.22"
}
